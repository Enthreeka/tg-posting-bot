package callback

import (
	"context"
	"errors"
	"fmt"
	"github.com/Enthreeka/tg-posting-bot/internal/handler/tgbot"
	service "github.com/Enthreeka/tg-posting-bot/internal/usecase"
	customErr "github.com/Enthreeka/tg-posting-bot/pkg/bot_error"
	store "github.com/Enthreeka/tg-posting-bot/pkg/local_storage"
	"github.com/Enthreeka/tg-posting-bot/pkg/logger"
	customMsg "github.com/Enthreeka/tg-posting-bot/pkg/tg_bot_api"
	"github.com/Enthreeka/tg-posting-bot/pkg/tg_bot_api/markup"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type PublicationChannel interface {
	CallbackCreatePublication() tgbot.ViewFunc
	CallbackUpdatePublicationSettings() tgbot.ViewFunc
	CallbackUpdatePublicationText() tgbot.ViewFunc
	CallbackUpdatePublicationImage() tgbot.ViewFunc
	CallbackUpdatePublicationButton() tgbot.ViewFunc
	CallbackUpdatePublicationSentDate() tgbot.ViewFunc
	CallbackUpdatePublicationDeleteDate() tgbot.ViewFunc
	CallbackCheckPublication() tgbot.ViewFunc
	CallbackGetPublicationGet() tgbot.ViewFunc
	CallbackGetListForCancelPublication() tgbot.ViewFunc
	CallbackDeletePublication() tgbot.ViewFunc
	CallbackCancelUpdate() tgbot.ViewFunc
}

type callbackPublication struct {
	publicationService service.PublicationService
	channelService     service.ChannelService
	log                *logger.Logger
	tgMsg              customMsg.Message
	store              store.LocalStorage
	publicationArray   *store.PublicationArray
}

func NewCallbackPublication(
	publicationService service.PublicationService,
	log *logger.Logger,
	tgMsg customMsg.Message,
	store store.LocalStorage,
	channelService service.ChannelService,
	publicationArray *store.PublicationArray,
) (PublicationChannel, error) {
	if log == nil {
		return nil, errors.New("logger is nil")
	}
	if publicationService == nil {
		return nil, errors.New("publicationService is nil")
	}
	if tgMsg == nil {
		return nil, errors.New("tgMsg is nil")
	}
	if store == nil {
		return nil, errors.New("store is nil")
	}
	if channelService == nil {
		return nil, errors.New("channelService is nil")
	}
	if publicationArray == nil {
		return nil, errors.New("publicationArray is nil")
	}

	return &callbackPublication{
		publicationService: publicationService,
		channelService:     channelService,
		log:                log,
		tgMsg:              tgMsg,
		store:              store,
		publicationArray:   publicationArray,
	}, nil
}

// CallbackCreatePublication - create_publication
func (c *callbackPublication) CallbackCreatePublication() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		channelID := GetID(update.CallbackData())
		if channelID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:\n" +
			`	{
			  "–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "2024-08-27 15:48",
			  "–¥–∞—Ç–∞_—É–¥–∞–ª–µ–Ω–∏—è": "2024-08-27 15:49",
			  "–∫–Ω–æ–ø–∫–∞": {
				"—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏": "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
				"—Å—Å—ã–ª–∫–∞_–∫–Ω–æ–ø–∫–∏": "https://yandex.ru"
			  }
			}` +
			"\n\n –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ —è–≤–ª—è—é—Ç—Å—è: –¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n\n" +
			`{
				 "–¥–∞—Ç–∞_–ø—É–±–ª–∏–∫–∞—Ü–∏–∏": "2024-08-27 15:48"
				}`

		cancelCommandMarkup := markup.CancelCommandCreate(channelID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationCreate,
			ChannelID:     channelID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackGetPublicationList - publication_get_{publication_id}
func (c *callbackPublication) CallbackGetPublicationGet() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		publication, err := c.publicationService.GetPublicationAndChannel(ctx, publicationID)
		if err != nil {
			c.log.Error("failed to GetPublicationAndChannel: %v", err)
			return err
		}

		text := fmt.Sprintf("*–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏*\n\n"+
			"–ö–∞–Ω–∞–ª: %s\n"+
			"–í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: %v\n"+
			"–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: %v", publication.ChannelName, publication.DeleteDate, publication.PublicationDate)
		updatePublicationSettingsMarkup := markup.UpdatePublicationSettings(publicationID)
		_, err = c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&updatePublicationSettingsMarkup,
			text)
		if err != nil {
			return err
		}

		return nil
	}
}

// CallbackUpdatePublicationSettings - publication_update_{channel_id}
func (c *callbackPublication) CallbackUpdatePublicationSettings() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		channelID := GetID(update.CallbackData())
		if channelID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		channel, err := c.channelService.GetByID(ctx, channelID)
		if err != nil {
			return err
		}

		publicationMarkup, err := c.publicationService.GetAllPublicationsByChannelID(ctx, channelID, "get")
		if err != nil {
			return err
		}

		text := fmt.Sprintf("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: **%s**\n\n‚ùå - –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ\n"+
			"‚úÖ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n‚è± - –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏\nüóë - —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞", channel.ChannelName)
		_, err = c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			publicationMarkup,
			text)
		if err != nil {
			return err
		}

		return nil
	}
}

// CallbackUpdatePublicationText - text_update_{publication_id}
func (c *callbackPublication) CallbackUpdatePublicationText() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
		cancelCommandMarkup := markup.CancelCommandPublication(publicationID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationTextUpdate,
			ChannelID:     publicationID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackUpdatePublicationImage - image_update_{publication_id}
func (c *callbackPublication) CallbackUpdatePublicationImage() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"
		cancelCommandMarkup := markup.CancelCommandPublication(publicationID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationImageUpdate,
			ChannelID:     publicationID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackUpdatePublicationButton - button_update_{publication_id}
func (c *callbackPublication) CallbackUpdatePublicationButton() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É (—Å—Å—ã–ª–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π).\n" +
			"–ü—Ä–∏–º–µ—Ä —Å —Å—Å—ã–ª–∫–æ–π:\n" +
			`{
				"—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏": "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏",
				"—Å—Å—ã–ª–∫–∞_–∫–Ω–æ–ø–∫–∏": "https://yandex.ru"
			}` +
			"–ü—Ä–∏–º–µ—Ä –±–µ–∑ —Å—Å—ã–ª–∫–∏:\n" +
			`{
				"—Ç–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏": "—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏"
			}`
		cancelCommandMarkup := markup.CancelCommandPublication(publicationID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationButtonUpdate,
			ChannelID:     publicationID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackUpdatePublicationSentDate - sent-date_update_{publication_id}
func (c *callbackPublication) CallbackUpdatePublicationSentDate() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-27 15:48"
		cancelCommandMarkup := markup.CancelCommandPublication(publicationID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationSentDateUpdate,
			ChannelID:     publicationID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackUpdatePublicationDeleteDate - delete-date_update_{publication_id}
func (c *callbackPublication) CallbackUpdatePublicationDeleteDate() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		text := "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-27 15:48"
		cancelCommandMarkup := markup.CancelCommandPublication(publicationID)
		sentMsg, err := c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			&cancelCommandMarkup,
			text)
		if err != nil {
			return err
		}

		c.store.Set(&store.Data{
			CurrentMsgID:  sentMsg,
			PreferMsgID:   update.CallbackQuery.Message.MessageID,
			OperationType: store.PublicationDeleteDateUpdate,
			ChannelID:     publicationID,
		}, update.FromChat().ID)

		return nil
	}
}

// CallbackCheckPublication - check_publication_{publication_id}
func (c *callbackPublication) CallbackCheckPublication() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		publication, err := c.publicationService.GetPublicationByPublicationID(ctx, publicationID)
		if err != nil {
			return err
		}

		if _, err := c.tgMsg.SendMessageToUser(update.FromChat().ID, publication); err != nil {
			c.log.Error("failed to send message to user: %v", err)
			return err
		}

		return nil
	}
}

// CallbackGetListForCancelPublication - publication_cancel
func (c *callbackPublication) CallbackGetListForCancelPublication() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		channelID := GetID(update.CallbackData())
		if channelID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		channel, err := c.channelService.GetByID(ctx, channelID)
		if err != nil {
			return err
		}

		publicationMarkup, err := c.publicationService.GetAllPublicationsByChannelID(ctx, channelID, "delete")
		if err != nil {
			return err
		}

		text := fmt.Sprintf("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: **%s**\\n\\n‚ùå - –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏|–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ\\n\"+\n\t\t\t\"‚úÖ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\\n‚è± - –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏\\nüóë - —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞"+
			"\n\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á—Ç–æ–±—ã –µ–µ *—É–¥–∞–ª–∏—Ç—å*", channel.ChannelName)
		_, err = c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			publicationMarkup,
			text)
		if err != nil {
			return err
		}

		return nil
	}
}

// CallbackDeletePublication - publication_delete_{publication_id}
func (c *callbackPublication) CallbackDeletePublication() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		publication, err := c.publicationService.GetPublicationByPublicationID(ctx, publicationID)
		if err != nil {
			return err
		}

		if err := c.publicationService.DeletePublication(ctx, publicationID); err != nil {
			c.log.Error("failed to delete publication: %v", err)
		}

		c.publicationArray.RemovePub(&store.PubData{
			PubDate:       publication.PublicationDate,
			PublicationID: publicationID,
		})

		text := "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞"
		if _, err := c.tgMsg.SendNewMessage(update.FromChat().ID, nil, text); err != nil {
			return err
		}

		return nil
	}
}

func (c *callbackPublication) CallbackCancelUpdate() tgbot.ViewFunc {
	return func(ctx context.Context, bot *tgbotapi.BotAPI, update *tgbotapi.Update) error {
		publicationID := GetID(update.CallbackData())
		if publicationID == 0 {
			c.log.Error("entity.GetID: failed to get id from channel button")
			return customErr.ErrNotFound
		}

		c.store.Delete(update.FromChat().ID)

		publication, err := c.publicationService.GetAllPublicationByID(ctx, publicationID)
		if err != nil {
			c.log.Error("failed to get publication: %v", err)
			return err
		}

		publicationMarkup, err := c.publicationService.GetMarkupPublication(publication, "get")
		if err != nil {
			return err
		}

		text := fmt.Sprintf("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞: **%s**\n\n‚ùå - –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏|–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ\n"+
			"‚úÖ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n‚è± - –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏\nüóë - —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞", publication[0].ChannelName)
		_, err = c.tgMsg.SendEditMessage(update.FromChat().ID,
			update.CallbackQuery.Message.MessageID,
			publicationMarkup,
			text)
		if err != nil {
			return err
		}

		return nil
	}
}
